name: Build & deploy website on release

on:
  release:
    types: [published, edited, released, prereleased]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag release cần deploy (vd: v1.0.0). Để trống = latest'
        required: false
        type: string
      asset_name:
        description: 'Tên file APK cần deploy (trống = lấy .apk đầu tiên)'
        required: false
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event.release && !github.event.release.draft)
    steps:
      - uses: actions/github-script@v7
        id: meta
        with:
          script: |
            const { owner, repo } = context.repo;
            let rel;

            if (context.eventName === 'workflow_dispatch') {
              const tag = core.getInput('tag') || '';
              if (tag) rel = (await github.rest.repos.getReleaseByTag({ owner, repo, tag })).data;
              else     rel = (await github.rest.repos.getLatestRelease({ owner, repo })).data;
            } else if (context.eventName === 'release') {
              const id = context.payload.release?.id;
              if (!id) core.setFailed('No release in payload');
              rel = (await github.rest.repos.getRelease({ owner, repo, release_id: id })).data;
            }

            if (!rel || rel.draft) core.setFailed('Release is draft or missing');

            const wantName = core.getInput('asset_name')?.trim();
            let asset;
            if (wantName) {
              asset = (rel.assets || []).find(a => a.name === wantName);
              if (!asset) core.setFailed(`APK named "${wantName}" not found in ${rel.tag_name || rel.name}`);
            } else {
              asset = (rel.assets || []).find(a => /\.apk$/i.test(a.name));
              if (!asset) core.setFailed(`No .apk asset in release ${rel.tag_name || rel.name}`);
            }

            core.setOutput('asset_url', asset.browser_download_url);
            core.setOutput('asset_name', asset.name);
            core.setOutput('size_bytes', String(asset.size));
            core.setOutput('version', (rel.tag_name || rel.name || '').replace(/^v/i, ''));
            core.setOutput('notes', rel.body || '');
            core.setOutput('published_at', rel.published_at || new Date().toISOString());
            core.setOutput('html_url', rel.html_url);

      - name: Download APK
        run: |
          curl -L --fail \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -o app.apk "${{ steps.meta.outputs.asset_url }}"

      - name: Compute sha256
        id: shasum
        run: |
          echo "Hashing file: ${{ steps.meta.outputs.asset_name }} (size=${{ steps.meta.outputs.size_bytes }})"
          echo "value=$(sha256sum app.apk | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Build site (root)
        run: |
          mkdir -p site/dl
          cp app.apk "site/dl/${{ steps.meta.outputs.asset_name }}"
          echo "${{ steps.shasum.outputs.value }}" > "site/dl/${{ steps.meta.outputs.asset_name }}.sha256"

          echo "playping.dihaver.tech" > site/CNAME
          touch site/.nojekyll

          cat > site/manifest.json <<EOF
          {
            "platform": "android",
            "version": "${{ steps.meta.outputs.version }}",
            "published_at": "${{ steps.meta.outputs.published_at }}",
            "release_page": "${{ steps.meta.outputs.html_url }}",
            "apk": {
              "url": "dl/${{ steps.meta.outputs.asset_name }}",
              "name": "${{ steps.meta.outputs.asset_name }}",
              "size_bytes": ${{ steps.meta.outputs.size_bytes }},
              "sha256": "${{ steps.shasum.outputs.value }}"
            },
            "notes": ${{ toJson(steps.meta.outputs.notes) }}
          }
          EOF

          echo "== site contents =="
          find site -maxdepth 2 -type f -printf "%p -> %k KB\n"
          echo "== manifest.json =="
          cat site/manifest.json

      - name: Upload artifact to Pages (becomes site root)
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
